<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Software Development Ramblings]]></title>
  <subtitle><![CDATA[Java, Scala and Android]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.piotrbuda.me//"/>
  <updated>2015-06-30T11:20:02.000Z</updated>
  <id>http://www.piotrbuda.me//</id>
  
  <author>
    <name><![CDATA[Piotr Buda]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Pony lang capabilities - understanding the defaults]]></title>
    <link href="http://www.piotrbuda.me/2015/06/pony-lang-capabilities-understanding-defaults.html"/>
    <id>http://www.piotrbuda.me/2015/06/pony-lang-capabilities-understanding-defaults.html</id>
    <published>2015-06-30T11:18:20.000Z</published>
    <updated>2015-06-30T11:20:02.000Z</updated>
    <content type="html"><![CDATA[<p>Pony offers concurrency programming using actors. However safe concurrency is hard. In order to make it safe, you have to remember about a few things. First of all, passing mutable data is hard, because concurrent reading and writing to that data can lead to garbage being store, or overwritten state. So concurrent programs have to employ safety mechanisms (such as locks, semaphores) to work with mutable data. However it’s error prone and introduces overhead, not to mention performance impact. <a href="http://tutorial.ponylang.org/capabilities/introduction/" target="_blank" rel="external">Pony tutorial</a> on capabilities mentions two ways of sharing data between actors - sharing immutable data and passing isolated data.</p>
<p>Sharing immutable data is safe, because once created this data cannot be modified. Think of sharing as moving reference to data around, leaving a trace of it everywhere you want. Isolated data (data for which only one reference exists) is safe, because only one actor can have reference to that data and changing mutable data in one actor is perfectly ok. So passing means that you pass the reference to someone else and don’t store it anymore.</p>
<p>Pony compiler can perform checks whether your program only shares immutable data or is passing isolated data. To achieve that, Pony introduces a mechanism called capabilities which makes some guarantees about sharing objects with other actors. These guarantees then allow the Pony compiler to check for errors in your code and whether your concurrent app will be safe. At first I found this topic to be confusing so I decided to write a post about it and maybe you, the reader, will have easier time understanding this concept.</p>
<a id="more"></a>
<h3 id="Pony_Capabilities">Pony Capabilities</h3><p>Pony capabilities are a kind of qualifier with which you can describe a way the language construct will be used in a concurrent program. There are six capabilities to choose from and some of them are for immutable data, some for isolation and one opaque that prevents object from being accessed.</p>
<ul>
<li><code>ref</code> (Reference) is your normal, mutable data. This data can be freely modified and read by a single actor or other variables, but it can’t be shared with other actors.</li>
<li><code>val</code> (Value) is for immutable data, which means that no-one can modify it, so it’s safe to read and share that data.</li>
<li><code>iso</code> (Isolated) marks a variable as being isolated so there’s no other variable that has access to that data, therefore it’s safe for your actor to read and write to it.</li>
<li><code>box</code> (Box) means that this data is read-only to you. There might be other variables writing to that data, but you can only read it.</li>
<li><code>trn</code> (Transition) allows you to use variable as a write-only.</li>
<li><code>tag</code> (Tag) is used for identification. You can neither write nor read from that variable, but you can use it to identify objects or share it with other actors.</li>
</ul>
<p>Some language constructs specify default capabilities that make sense in most cases. Below we will</p>
<h3 id="Actor_default">Actor default</h3><p>By default all actors are <code>tag</code>s and you can’t change it - compiler will complain about such attempt:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actor Act val&#10;  be dosmth() =&#62; None</span><br></pre></td></tr></table></figure></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/Volumes/</span>Personal<span class="regexp">/pony/</span>capabilities/main.<span class="string">pony:</span><span class="number">12</span>:<span class="number">11</span>: actor cannot specify <span class="keyword">default</span> capability</span><br><span class="line">actor Act val</span><br></pre></td></tr></table></figure>
<p>By being a <code>tag</code> actors can be safely passed between your objects and you can call behaviors on them.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actor Main&#10;  new create(env:Env) =&#62;&#10;  var foo:Foo = Foo&#10;  let a = Act&#10;  foo.dosmth(a)&#10;&#10;class Foo&#10;  new create() =&#62; None&#10;  fun dosmth(a:Act) =&#62;&#10;    a.dosmth()&#10;&#10;actor Act&#10;  be dosmth() =&#62; None</span><br></pre></td></tr></table></figure></p>
<h3 id="Primitive_default">Primitive default</h3><p>Primitives are always <code>val</code>s and similar to actors you cannot specify a capability for primitives.</p>
<h3 id="Class_default">Class default</h3><p>When you define a new <code>class</code> by default it’s a <code>ref</code>. This means that when you create a new instance of this class it will default to <code>ref</code> but you can override that by defining a capability on variable (more on that later).</p>
<p>You can however specify the default capability your new instances will default to:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actor Main&#10;  new create(env:Env) =&#62;&#10;  var foo:Foo = Foo&#10;&#10;class Foo box&#10;  var a:Array[U8] = Array[U8]&#10;  new create() =&#62; None</span><br></pre></td></tr></table></figure></p>
<p>Variable <code>foo</code> in this case is a <code>box</code>. That is because you specified a default capability in the class definition. If you now try to modify the <code>a</code> variable compiler will complain about unsafe operation<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actor Main&#10;  new create(env:Env) =&#62;&#10;  var foo:Foo = Foo&#10;  foo.a = Array[U8]&#10;&#10;class Foo box&#10;  var a:Array[U8] = Array[U8]&#10;  new create() =&#62; None</span><br></pre></td></tr></table></figure></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/Volumes/Personal/pony/capabilities/main.pony:<span class="number">4</span>:<span class="number">9</span>: <span class="operator">not</span> safe <span class="built_in">to</span> <span class="built_in">write</span> <span class="constant">right</span> side <span class="built_in">to</span> left side</span><br><span class="line">  foo.<span class="operator">a</span> = Array[U8]</span><br></pre></td></tr></table></figure>
<h3 id="Constructor_default">Constructor default</h3><p>Constructors in Pony also have a default return type, which is <code>ref</code>. It’s easily changeable though, by specifying the capability name right after the <code>new</code> keyword.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Foo val&#10;  new val create() =&#62; None</span><br></pre></td></tr></table></figure></p>
<p>It is important to remember that while specifying the class default makes your defined variable use the same capability as class, it might be incompatible with the constructor capability.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actor Main&#10;  new create(env:Env) =&#62;&#10;  var foov:Foo = Foo&#10;&#10;class Foo val&#10;  new create() =&#62; None</span><br></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/Volumes/Personal/pony/capabilities/main<span class="class">.pony</span>:<span class="number">3</span>:<span class="number">16</span>: <span class="attribute">right</span> side must be <span class="tag">a</span> subtype of <span class="attribute">left</span> side</span><br><span class="line">  <span class="tag">var</span> foov:Foo = Foo</span><br><span class="line">               ^</span><br><span class="line">/Volumes/Personal/pony/capabilities/main<span class="class">.pony</span>:<span class="number">6</span>:<span class="number">3</span>: <span class="attribute">right</span> side type: Foo ref</span><br><span class="line">  new <span class="function"><span class="title">create</span><span class="params">()</span></span> =&gt; None</span><br><span class="line">  ^</span><br><span class="line">/Volumes/Personal/pony/capabilities/main<span class="class">.pony</span>:<span class="number">3</span>:<span class="number">12</span>: <span class="attribute">left</span> side type: Foo val</span><br><span class="line">  <span class="tag">var</span> foov:Foo = Foo</span><br></pre></td></tr></table></figure>
<p>One of possible solutions is to specify the returning capability for <code>Foo</code>s constructor.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Foo val&#10;  new val create() =&#62; None</span><br></pre></td></tr></table></figure></p>
<p>Another possibility is to use the <code>recover</code> block but this is out of scope of this article.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actor Main&#10;  new create(env:Env) =&#62;&#10;  var foov:Foo = recover val Foo end&#10;&#10;class Foo val&#10;  new create() =&#62; None</span><br></pre></td></tr></table></figure></p>
<h3 id="Function_default">Function default</h3><p>Functions can have capabilities defined in two places in their declaration. The first place is function’s return type<br>capability. This uses class defaults but can be overridden by specifying a concrete capability.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actor Main&#10;  new create(env:Env) =&#62;&#10;    let f = Foo&#10;&#10;class Foo&#10;  let a:String = &#34;a&#34;&#10;&#10;  fun get_a():String iso =&#62; a.clone()</span><br></pre></td></tr></table></figure></p>
<p><code>String</code> is a <code>val</code> by default but here we define in our function that we want the resulting type to be actually <code>String iso</code>.</p>
<p>The other place you can set the capability on a function declaration is right after the <code>fun</code> keyword. This capability will define<br>how the function can behave. By default this capability is <code>box</code> which means that data in the owner class is read only to that method.<br>This plays well with <code>box</code> definition - there are other places the variables can change (other methods that can change the class fields)<br>but you can only read them. Trying to modify fields in a default <code>box</code> function will make compiler complain<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Foo&#10;  var a:String = &#34;a&#34;&#10;&#10;  fun get_a():String =&#62;  a = a + &#34;b&#34;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/Volumes/Personal/pony/capabilities/main<span class="class">.pony</span>:<span class="number">4</span>:<span class="number">28</span>: cannot write to <span class="tag">a</span> field <span class="keyword">in</span> <span class="tag">a</span> box function</span><br><span class="line">  fun <span class="function"><span class="title">get_a</span><span class="params">()</span></span>:String =&gt;  <span class="tag">a</span> = <span class="tag">a</span> + <span class="string">"b"</span></span><br><span class="line">                           ^</span><br></pre></td></tr></table></figure>
<p>But change that to something that is write capable (<code>iso</code>, <code>trn</code>, <code>ref</code>) and you can modify your class contents again<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Foo&#10;  var a:String = &#34;a&#34;&#10;&#10;  fun ref get_a():String =&#62;  a = a + &#34;b&#34;</span><br></pre></td></tr></table></figure></p>
<h3 id="Variable_default">Variable default</h3><p>Variables default to whatever they are created for. When instantiating a class, then it will default to <code>ref</code> or<br>if class has a default set, to whatever was set in class definition. For actors it will always be <code>tag</code> because actors<br>are always <code>tag</code>s. For primitives it will be <code>val</code>.</p>
<p>As mentioned in the section about classes, variables will default to capability specified in class (or <code>ref</code> if none was specified). This can be changed<br>by providing capability name right after type declaration<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actor Main&#10;  new create(env:Env) =&#62;&#10;  var foo:Foo iso = recover Foo end&#10;&#10;class Foo val</span><br></pre></td></tr></table></figure></p>
<p>For function return types however, if you don’t use type inference (you define type of your variable explicitly) then you have to provide the capability that can be used<br>as alias capability (aliasing is out of scope of this article). In the example below we use <code>box</code> as the variable capability but we could also use <code>val</code> or <code>tag</code>. This is because<br>as mentioned before, variables default to whatever is the default of their type.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actor Main&#10;  new create(env:Env) =&#62;&#10;  var foo:Foo = Foo&#10;  var s:Seq[String] box = foo.get()&#10;&#10;class Foo&#10;  fun get():Seq[String] val =&#62; recover Array[String] end</span><br></pre></td></tr></table></figure></p>
<h3 id="Summary">Summary</h3><p>Pony capabilities are used throughout the Pony code so some sensible defaults need to be set. Knowledge of these can help you understand compiler warnings and adapt your code to conform to capability rules.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Pony offers concurrency programming using actors. However safe concurrency is hard. In order to make it safe, you have to remember about a few things. First of all, passing mutable data is hard, because concurrent reading and writing to that data can lead to garbage being store, or overwritten state. So concurrent programs have to employ safety mechanisms (such as locks, semaphores) to work with mutable data. However it’s error prone and introduces overhead, not to mention performance impact. <a href="http://tutorial.ponylang.org/capabilities/introduction/">Pony tutorial</a> on capabilities mentions two ways of sharing data between actors - sharing immutable data and passing isolated data.</p>
<p>Sharing immutable data is safe, because once created this data cannot be modified. Think of sharing as moving reference to data around, leaving a trace of it everywhere you want. Isolated data (data for which only one reference exists) is safe, because only one actor can have reference to that data and changing mutable data in one actor is perfectly ok. So passing means that you pass the reference to someone else and don’t store it anymore.</p>
<p>Pony compiler can perform checks whether your program only shares immutable data or is passing isolated data. To achieve that, Pony introduces a mechanism called capabilities which makes some guarantees about sharing objects with other actors. These guarantees then allow the Pony compiler to check for errors in your code and whether your concurrent app will be safe. At first I found this topic to be confusing so I decided to write a post about it and maybe you, the reader, will have easier time understanding this concept.</p>]]>
    
    </summary>
    
      <category term="capabilities" scheme="http://www.piotrbuda.me/tags/capabilities/"/>
    
      <category term="concurrency" scheme="http://www.piotrbuda.me/tags/concurrency/"/>
    
      <category term="defaults" scheme="http://www.piotrbuda.me/tags/defaults/"/>
    
      <category term="pony" scheme="http://www.piotrbuda.me/tags/pony/"/>
    
      <category term="Software Development" scheme="http://www.piotrbuda.me/categories/Software-Development/"/>
    
      <category term="Pony" scheme="http://www.piotrbuda.me/categories/Software-Development/Pony/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Implementing chat application with Pony lang]]></title>
    <link href="http://www.piotrbuda.me/2015/05/implementing-chat-application-with-pony-lang.html"/>
    <id>http://www.piotrbuda.me/2015/05/implementing-chat-application-with-pony-lang.html</id>
    <published>2015-05-13T22:00:00.000Z</published>
    <updated>2015-05-15T12:13:28.000Z</updated>
    <content type="html"><![CDATA[<p>Recently on Hacker News I spotted a post on a new object-oriented, actor-model programming language called <a href="http://ponylang.org/" target="_blank" rel="external">Pony</a>. Given it is pretty new (as of this post the current version is 0.1.3) I decided to give it a try and hack a little.</p>
<p>I’ve went through a tutorial that is available at <a href="http://tutorial.ponylang.org/" target="_blank" rel="external">Pony’s site</a> and found the language to be pretty interesting, so I decided to implement my first simple application - a chat. I think it will allow me to experiment with a few language features and will be enough for a start with the new language. I’d like to share with you what I created and give you some introduction to the language. I will also try to explain a few things on the way but please remember that explaining everything in detail is impossible in one post, hence more will come :)</p>
<p>The architecture of this application will be pretty simple. We’ll have a server, that will manage user sessions and a client that will login to the server and post messages to it. After each message is posted the chat log will be displayed on the screen. For starters the whole application will be hardcoded, without remote calls and such - time will come to implement that too :) (I don’t think there are remote actors in Pony yet!)</p>
<a id="more"></a>
<h3 id="Client">Client</h3><p>The client is a simple class that encapsulates server calls. It exposes just three methods: <code>login</code>, <code>post</code> and <code>logout</code>. This is how it looks like:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Client &#10;  let username:String&#10;  let server:Server&#10;&#10;  new create(username&#39;:String, server&#39;:Server) =&#62;&#10;    username = username&#39;&#10;    server = server&#39;&#10;&#10;  fun login() =&#62; server.login(username)&#10;&#10;  fun logout() =&#62; server.logout(username)&#10;&#10;  fun post(message:String) =&#62; server.post(username, username + &#34;: &#34; + message)</span><br></pre></td></tr></table></figure>
<p>Let’s talk about what we can see here.</p>
<p>Classes in Pony are defined using the <code>class</code> keyword. Classes can have fields defined with either <code>var</code> or <code>let</code> and methods defined with <code>fun</code>. Fields defined with <code>var</code> keyword can change in time - you can set it’s default value in constructor and then reassign it sometime later, while fields defined with <code>let</code> are instantiated once (either in constructor or inline in declaration) and then can’t be reassigned later on.     </p>
<p>In Pony classes and actors can have many constructors, and unlike Java, they don’t have to be named like the class they are part of. The constructor is marked with the <code>new</code> keyword. The default constructor name is <code>create</code> (which is important for some sugar to work) but you can have any name here you’d like. Think of it as a factory method so you can instantiate your class or actor in a specific way with constructor name really describing your intent. Quite neat.</p>
<p>You can spot a simple convenience stuff in the argument list of the constructor. The <code>username&#39;</code> and <code>server&#39;</code> arguments are followed by the <code>&#39;</code> because you can’t have same names in a scope, you also can’t reference fields with <code>this</code>. So Pony allows you to create a <code>prime</code> of the argument so you don’t have to provide different names.</p>
<p>Then come the definitions of methods which are defined using the <code>fun</code> keyword. Methods also have to have parenthesis, even empty ones. In this example methods don’t return any values, they simply delegate to another object.</p>
<h3 id="Server">Server</h3><p>The server is responsible for managing user sessions and storing the chat log in some persistent storage. Because of that, the server is split into a few smaller parts. The topmost part is the <code>Server</code> actor that the <code>Client</code> is calling. It stores user sessions and delegate chat messages to the storage. The <code>trait Storage</code> is used to define an interface for the storage system and a simple <code>actor MemoryStorage</code> implements this trait. In order to retrieve the messages, an <code>interface LogPrinter</code> is introduced which defines a method to print a message.</p>
<p>Let’s start with implementing the storage.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface LogPrinter &#10;  be print(message:String)&#10;&#10;trait Storage tag&#10;  be push(message:String)&#10;&#10;  be print(printer:LogPrinter tag)</span><br></pre></td></tr></table></figure>
<p>There’s quite a few new things in this snippet to notice. Both defined types are <code>interface LogPrinter</code> and <code>trait Storage tag</code>. Pony has two types of subtyping: structural (using <code>interface</code>) and nominal (using <code>trait</code>). Structural subtyping is a kind of subtyping where a name doesn’t matter and only how a type is built. On the other hand nominal subtyping also checks names. Another thing to notice is the <code>tag</code> keyword. This is a <code>capability</code>. Pony introduces a concept of <code>capabilities</code> to make guarantees about sharing objects between actors so that compiler can check that. This is important for safe concurency where Pony tries to excell. One last thing to note is that methods in both types are defined using <code>be</code> keyword. This keyword denotes a behaviour on an actor. We’ll talk about it in a second.</p>
<h5 id="Storage">Storage</h5><p>First let’s see how <code>trait</code> is used and later we’ll see how <code>interface</code> is used.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actor MemoryStorage is Storage &#10;  let _env:Env&#10;  &#10;  let log:List[String]&#10;&#10;  new create(env:Env) =&#62;&#10;    _env = env&#10;    log = List[String]&#10;&#10;  be push(message:String) =&#62; &#10;    _env.out.print(&#34;Pushing message: &#34; + message)&#10;    log.push(message)&#10;&#10;  be print(printer:LogPrinter tag) =&#62;&#10;    _env.out.print(&#34;Printing log&#34;)&#10;    try&#10;      for message in log.values() do&#10;        printer.print(message)&#10;      end&#10;    end</span><br></pre></td></tr></table></figure>
<p>Here we implement the <code>trait Storage</code>, this is achieved by specifying the list of traits after the keyword <code>is</code>. To implement a <code>trait</code> we need to define implementation of the methods specified in <code>trait Storage</code>. We define a variable <code>let _env:Env</code> - <code>Env</code> is a class representing the environment, it holds references to input and output and program arguments. Our <code>actor MemoryStorage</code> will store the messages as a simple list of strings, so we define a <code>let log:List[String]</code> variable. I won’t go into detail of how <code>List[A]</code> works, so if you’re interested in Pony collections, you can browse the code at <a href="https://github.com/CausalityLtd/ponyc/tree/master/packages/collections" target="_blank" rel="external">Pony’s GitHub</a>.</p>
<p>Now let’s get back to the <code>be</code> keyword. Pony actors expose their logic via behaviours. Behaviours differ to functions in that behaviours are asynchronous. You can’t specify a return type for a behaviour, because it always returns the receiver (the actor on which the behaviour is called) so that you can chain multiple behaviours. A note to remember is that even though actors allow concurrent programming, execution of code in actor is sequential, so you don’t have to worry about concurrency while writing actor code.</p>
<p>I’d like to point out one thing I don’t like in this piece of code. The <code>trait Storage</code> defines methods as behaviours, because you can’t have a <code>trait</code> or an <code>interface</code> with <code>fun</code>s and then implement that in actor as <code>be</code>s and the other way around. It seems then that looking at <code>trait</code> or <code>interface</code> definition you already know whether you’ll be working with actor or an object. In a way it’s fine, because that makes you realize you’ll be working with async code, on the other hand it doesn’t seem flexible. I guess there might be something deeper in this and I will have to investigate it further.</p>
<h5 id="Session">Session</h5><p>Next piece of the application is the session management actor. It’s pretty simple.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actor Session&#10;  let username:String&#10;  let storage:Storage&#10;&#10;  new create(username&#39;:String, storage&#39;:Storage) =&#62;&#10;    username = username&#39;&#10;    storage = storage&#39;&#10;&#10;  be post(message:String) =&#62;&#10;    storage.push(message)</span><br></pre></td></tr></table></figure>
<p>This session manager acts as a bridge between the server and the storage. One thing to note here is that behaviour <code>be post(message:String)</code> delegates to the storage. In such case the caller of the <code>post</code> method will get the <code>Session</code> actor back as it’s the direct receiver. I’m not sure it’s possible to <code>forward</code> behaviours as in for example Akka, or maybe it just isn’t implemented yet (remember, I was working with version 0.1.2!)</p>
<h5 id="Actual_server">Actual server</h5><p>And finally we have an <code>actor Server</code> that orchestrates the whole thing.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actor Server &#10;  let storage:Storage&#10;  let sessions:Map[String, Session]&#10;  let env:Env&#10;&#10;  new create(env&#39;:Env) =&#62;&#10;    env = env&#39;&#10;    storage = MemoryStorage(env)&#10;    sessions = Map[String, Session]&#10;&#10;  be login(username:String) =&#62;&#10;    try&#10;      sessions.insert(username, Session(username, storage))&#10;    else&#10;      env.out.print(&#34;Error creating session for &#34; + username)&#10;    end&#10;&#10;  be logout(username:String) =&#62;&#10;    try&#10;      sessions.remove(username)&#10;    end&#10;&#10;  be post(from:String, message:String) =&#62;&#10;    try&#10;      sessions(from).post(message)&#10;    else&#10;      env.out.print(&#34;Could not find session for &#34; + from)&#10;    end&#10;&#10;  be print_log() =&#62;&#10;    storage.print(this)&#10;&#10;  be print(message:String) =&#62;&#10;    env.out.print(message)</span><br></pre></td></tr></table></figure>
<p>Again, a few new concepts kick in. Let’s see how the <code>Session</code> actor is created in the <code>be login(username:String)</code> method. The normal way of calling constructors is by invoking <code>ClassName.create()</code> or any other constructor name. Pony provides some sugar for you and here, the default constructor <code>create</code> can be called implicitly. So the call to <code>Session(username, storage)</code> is actually <code>Session.create(username, storage)</code>.</p>
<p>But wait, there’s more sugar! Take notice of how the session is retrieved in <code>be post(from:String, message:String)</code> method. The <code>Map</code> defines a special method <code>fun apply(key: box-&gt;K!): this-&gt;V ?</code> and Pony allows you to call that method directly on an object. So the call <code>sessions(from)</code> is actually <code>sessions.apply(from)</code>. This is pretty useful as you can define <code>apply</code> method for your classes that would be their default (or convenient) action.</p>
<p>One last thing to talk about here are the <code>be print_log()</code> and <code>be print(message:String)</code> methods. The latter has been defined in the <code>interface LogPrinter</code> but as I’ve mentioned before, interfaces are used for structural subtyping, so no naming is required. That is why <code>actor Server</code> does not define <code>is LogPrinter</code> (although it could, for readability) but it actually is one, because it defines the behaviour presented in that <code>interface</code>. That’s why we can call the <code>MemoryStorage.print(LogPrinter)</code> method using <code>this</code> keyword.</p>
<h3 id="Running_the_application">Running the application</h3><p>Compiling Pony code is pretty easy - just run <code>ponyc</code> (assuming you’ve got it installed) in the folder of your program and you will get a few artifacts out of it, one being an executable to run. But to run a Pony program you need an actor that is called Main. So let’s add it and run our program.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actor Main&#10;  new create(env:Env) =&#62;&#10;    let server = Server(env)&#10;    let c1 = Client(&#34;client1&#34;, server)&#10;    let c2 = Client(&#34;client2&#34;, server)&#10;    c1.login()&#10;    c2.login()&#10;    c1.post(&#34;Hi!&#34;)&#10;    server.print_log()&#10;    c2.post(&#34;Hi!&#34;)&#10;    server.print_log()&#10;    c1.logout()&#10;    c2.logout()</span><br></pre></td></tr></table></figure>
<p>Pretty simple. But it doesn’t work as expected. Since behaviours as asynchronous, the output of the program is indefinite. Sometimes you’ll get just the first message sent, sometimes all. I’m not sure why so maybe some more skilled reader will suggest a solution :)</p>
<h3 id="Summary">Summary</h3><p>So that’s it folks! I’ve had quite fun time implementing that, reading about and using this new kid on the block. Did I like Pony? Yes, given it’s very new and a lot of stuff is not implemented yet, it gives hope. Where would I use Pony? Don’t know yet, it’s actor-model based and has some guarantees about concurrency, so it might work very well in networking applications and highly concurent computation stuff. I definitely will follow the development of the language and also write some more blog posts about it’s features. There’s certainly a lot to be covered, since the documentation is not yet fully developed and some parts (like capabilities) are hard to understand. The full code of this chat application is available at <a href="">GitHub</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Recently on Hacker News I spotted a post on a new object-oriented, actor-model programming language called <a href="http://ponylang.org/">Pony</a>. Given it is pretty new (as of this post the current version is 0.1.3) I decided to give it a try and hack a little.</p>
<p>I’ve went through a tutorial that is available at <a href="http://tutorial.ponylang.org/">Pony’s site</a> and found the language to be pretty interesting, so I decided to implement my first simple application - a chat. I think it will allow me to experiment with a few language features and will be enough for a start with the new language. I’d like to share with you what I created and give you some introduction to the language. I will also try to explain a few things on the way but please remember that explaining everything in detail is impossible in one post, hence more will come :)</p>
<p>The architecture of this application will be pretty simple. We’ll have a server, that will manage user sessions and a client that will login to the server and post messages to it. After each message is posted the chat log will be displayed on the screen. For starters the whole application will be hardcoded, without remote calls and such - time will come to implement that too :) (I don’t think there are remote actors in Pony yet!)</p>]]>
    
    </summary>
    
      <category term="actors" scheme="http://www.piotrbuda.me/tags/actors/"/>
    
      <category term="capabilities" scheme="http://www.piotrbuda.me/tags/capabilities/"/>
    
      <category term="concurrency" scheme="http://www.piotrbuda.me/tags/concurrency/"/>
    
      <category term="pony lang" scheme="http://www.piotrbuda.me/tags/pony-lang/"/>
    
      <category term="Software Development" scheme="http://www.piotrbuda.me/categories/Software-Development/"/>
    
      <category term="Pony" scheme="http://www.piotrbuda.me/categories/Software-Development/Pony/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Microsoft Natural Ergonomic Keyboard 4000]]></title>
    <link href="http://www.piotrbuda.me/2013/05/microsoft-natural-ergonomic-keyboard-4000.html"/>
    <id>http://www.piotrbuda.me/2013/05/microsoft-natural-ergonomic-keyboard-4000.html</id>
    <published>2013-05-22T12:00:00.000Z</published>
    <updated>2015-05-04T22:13:45.000Z</updated>
    <content type="html"><![CDATA[<p>I’ve been using computers for almost 28 years now (yes, my first ever computer was ZX Spectrum when I was 3) and thoughout that time I was always using traditional keyboards. Some of them were better, some of them were worse, but I never thought about all those fancy ‘flat’, waved or ergonomic keyboards. That changed recently as I got a nice and shiny Macbook Pro.<br><a id="more"></a></p>
<p>I’ve been using laptops before and I always disgusted their keyboards - small keys, uncomfortable layout for things like arrows, PgUp/PgDown keys. Macbook’s Pro keyboard is allright (it doesn’t have any additional keys beyond arrows) but it’s also smaller than your typical desktop keyboard. After a few weeks of using it I feld uncomfortable, my wrists were in very unnatural position and I’ve decided it’s high time to check out on of these ergonomic layouts.</p>
<p>When I started looking for ergonomic keyboards, I immediately found <a href="http://www.kinesis-ergo.com/freestyle2.htm" target="_blank" rel="external">Kinesis Ergo Freestyle 2</a>. It seems alright, being split you can put it at exactly right angle for your wrists, it comes with some accessory that will be very helpful for me in a while (I am getting a proper standing desk soon) but it ain’t cheap (I’d need to buy it from some EU resseler, i.e. at £127 excl. VAT). Of course I also found <a href="http://www.goldtouch.com/p-2-goldtouch-v2-adjustable-comfort-keyboard-pc-mac-compatible-usb.aspx" target="_blank" rel="external">Goldtouch V2 Adjustable Comfort Keyboard</a> and it’s also quite nice and at $119 it’s cheaper than Freestyle 2, but I’d have to also add VAT and customs to that, so again, it’s not cheap. My dream keyboard is now the one made by <a href="http://www.trulyergonomic.com/" target="_blank" rel="external">Trully Ergonomic</a> - it is expensive, but it’s compact (I can live without numeric pad), it’s got mechanical keys, awesome looks, Mac keys - just awesome. However at price point of somewhere around £200 it’s far beyond my budget at this moment (I do accept donations though :D).</p>
<p>Many people recommended a much cheaper solution to all these trully great keyboards - the <a href="http://www.microsoft.com/hardware/en-us/p/natural-ergonomic-keyboard-4000" target="_blank" rel="external">Microsoft Natural Ergonomic Keyboard 4000</a>. I bought it at 180PLN (so it’s around $60) and what’s different in this keyboard from the ones I mentioned earlier is that it’s quite big. It is a full keyboard, with numeric pad, typical insert, delete, home, end, pgup and pgdown keys. It’s not flat like Kinesis or Goldtouch but instead curved in the middle with very noticable gap between key sections. It’s wristpad is covered with leather-like material which to my astonishment prevents my hands from sweating. The angle of the keyboard is nice, and since I started using it all my wrist pain is gone now.</p>
<p>It took me a few days to adapt to the new layout, mainly because I had a bit different key stroking habits, i.e. I used to hit B key with right hand and on this keyboard B is properly placed for left hand. Despite the first few problems with mishits and typos, now after about three weeks of using it it feels great and my typing speed is almost back to normal.</p>
<p>The keys are not that loud, when typing slowly (like in games) it’s almost noiseless; but when you start going full-speed (like writing a blog post) it starts to get ugly, but who cares? Keys are very different, some are smaller (q, a, z) but in this case it means normal for other keyboards; other keys are larger (t, n, h, g) and they take a lot of space. This keyboard forces you to change yoruwritng habits and I think that’s good, because now I type without moving my wrists to much.</p>
<p>It has drawbacks though. Beging a PC keyboard, it lacks Mac keyboards, but if you’re typing without looking at keys, then that’s not really a big problem. Another bad thing for me is this keyboard’s size - it’s a full keyboard, so it’s quite wide. To effectively use it, you’d rather want the middle of the letter section to be in front of you, pushing the numeric pad to the far right. This is necessary for both wrists to lay loosely on the keyboard, but it makes usage of the mouse a bit inconvenient - you have to reach quite far to grab it and there goes the ergonomics. That’s it, I can’t really think of any other problems with it, which for me makes this $60 keyboard a real bang for the buck. I think that the only thing that I’d ever add to this keyboard is wireless capability - Macbook Pro has 2 USB ports and having both used for keyboard and mouse I can no longer connect my pendrives to it :(</p>
<p>I hope you’ll find this little review enough to buy that Microsoft keyboard, or at least start some interest in ergonomic keyboard designs. Trust me, once you try an ergonomic keyboard, you will feel awkward trying to type on a normal one :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I’ve been using computers for almost 28 years now (yes, my first ever computer was ZX Spectrum when I was 3) and thoughout that time I was always using traditional keyboards. Some of them were better, some of them were worse, but I never thought about all those fancy ‘flat’, waved or ergonomic keyboards. That changed recently as I got a nice and shiny Macbook Pro.<br>]]>
    
    </summary>
    
      <category term="hardware" scheme="http://www.piotrbuda.me/categories/hardware/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ScalaWebSocket]]></title>
    <link href="http://www.piotrbuda.me/2013/04/scalawebsocket.html"/>
    <id>http://www.piotrbuda.me/2013/04/scalawebsocket.html</id>
    <published>2013-04-24T14:45:00.000Z</published>
    <updated>2015-05-04T22:13:45.000Z</updated>
    <content type="html"><![CDATA[<h3 id="ScalaWebSocket">ScalaWebSocket</h3><p>On April 21st I pushed the <a href="https://github.com/pbuda/scalawebsocket" target="_blank" rel="external">ScalaWebSocket</a> library to GitHub. But what is it? As the name suggests, it’s WebSockets for Scala.</p>
<p>There are already a few implementations of WebSocket for Java, there is also the Scala project called <a href="https://github.com/jfarcand/WCS" target="_blank" rel="external">wCS</a> but all of them support Javaish style of passing the anonymous implementations of some kind of Listener interface. I didn’t want that as I prefer the functional style of handlers.</p>
<p>ScalaWebSocket is a thin wrapper around <a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="external">async-http-client</a> and it exposes a more Scala-like vocabulary to interact with WebSockets.</p>
<h3 id="Installation">Installation</h3><p>To start using it in your project</p>
<figure class="highlight mel"><figcaption><span>Dependency in SBT</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libraryDependncies += <span class="string">"eu.piotrbuda"</span> <span class="variable">%%</span> <span class="string">"scalawebsocket"</span> % <span class="string">"0.1.0"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><figcaption><span>Dependency in Maven</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>eu.piotrbuda<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>scalawebsocket_2.10<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Examples">Examples</h3><p>Usage of this library is very simple.</p>
<figure class="highlight scala"><figcaption><span>Open a WebSocket connection</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebSocket</span>().open(<span class="string">"ws://echo.websocket.org/"</span>).sendText(<span class="string">"text"</span>).close().shutdown()</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><figcaption><span>Listen for text messages</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebSocket</span>().open(<span class="string">"ws://echo.websocket.org/"</span>)</span><br><span class="line">.onTextMessage(msg =&gt; doSomethingWithMessage(msg))</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><figcaption><span>Add several listeners</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebSocket</span>().open(<span class="string">"ws://echo.websocket.org/"</span>)</span><br><span class="line">.onTextMessage(msg =&gt; doSomethingWithMessage(msg))</span><br><span class="line">.onBinaryMessage(msg =&gt; doSomethingWithBinaryMessage(msg))</span><br></pre></td></tr></table></figure>
<h3 id="Future">Future</h3><p>I need this library to talk to SocketIO servers, so in version 0.2.0 I will implement some basic support for SocketIO.<br> For now, please use it and report any issues you have. My goal for this library is to make WebSocket natural in Scala.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="ScalaWebSocket">ScalaWebSocket</h3><p>On April 21st I pushed the <a href="https://github.com/pbuda/scalawebsocket" target="_blank" r]]>
    </summary>
    
      <category term="scala" scheme="http://www.piotrbuda.me/tags/scala/"/>
    
      <category term="websocket" scheme="http://www.piotrbuda.me/tags/websocket/"/>
    
      <category term="scala" scheme="http://www.piotrbuda.me/categories/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Trying to deploy Scala app on OpenShift]]></title>
    <link href="http://www.piotrbuda.me/2013/02/trying-to-deploy-scala-app-on-openshift.html"/>
    <id>http://www.piotrbuda.me/2013/02/trying-to-deploy-scala-app-on-openshift.html</id>
    <published>2013-02-26T09:35:00.000Z</published>
    <updated>2015-05-04T22:19:44.000Z</updated>
    <content type="html"><![CDATA[<h3 id="The_beggining">The beggining</h3><p>This is a simple log of what I have done during past few days trying to deploy a simple app to <a href="https://openshift.redhat.com/app/" target="_blank" rel="external">OpenShift</a>. I thought it would be quite easy but apparently this is beyond my knowledge. My application is a simple Hello World app. The only real requirement is that I wanted this app to compile with Scala 2.10.</p>
<h3 id="Setup">Setup</h3><p>I won’t discuss how to set up the application on <a href="https://openshift.redhat.com/app/" target="_blank" rel="external">OpenShift</a> (unless it is really needed). The only thing worth mentioning is that you will need a Do-It-Yourself type.</p>
<h3 id="SBT">SBT</h3><p>There is no <a href="http://www.scala-sbt.org/" target="_blank" rel="external">SBT</a> on <a href="https://openshift.redhat.com/app/" target="_blank" rel="external">OpenShift</a>. That’s right, you have to get it yourself. <a href="https://openshift.redhat.com/app/" target="_blank" rel="external">OpenShift</a> however provides a nice way of storing things with its data directory (available at $OPENSHIFT_DATA_DIR) and it’s action hooks are the way to go in this case. After some trial and error this is the script I came up with.<br><figure class="highlight bash"><figcaption><span>pre_build script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$OPENSHIFT_DATA_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="operator">-d</span> sbt ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"SBT installed"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  curl -o sbt.tgz http://scalasbt.artifactoryonline.com/scalasbt/sbt-native-packages/org/scala-sbt/sbt/<span class="number">0.12</span>.<span class="number">2</span>/sbt.tgz</span><br><span class="line">  tar zxvf sbt.tgz sbt</span><br><span class="line">  rm sbt.tgz</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><br>This script basically downloads SBT from its site but only if SBT folder is not present in the data directory. Then the downloaded tgz archive gets unpacked and SBT is ready to be used.</p>
<h3 id="Building">Building</h3><p>Now this is the part I spent most time with and unfortunately I can’t make it fully work :( There were several issues with building using <a href="http://www.scala-sbt.org/" target="_blank" rel="external">SBT</a>, but after some time it almost worked. Here’s the build script I developed that semi-works.<br><figure class="highlight stylus"><figcaption><span>build script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SBT_PATH=<span class="variable">$OPENSHIFT_DATA_DIR</span>/sbt</span><br><span class="line">SBT_DIR=<span class="variable">$OPENSHIFT_DATA_DIR</span>/<span class="class">.sbt</span></span><br><span class="line">IVY_DIR=<span class="variable">$OPENSHIFT_DATA_DIR</span>/<span class="class">.ivy</span></span><br><span class="line"></span><br><span class="line">cd <span class="variable">$OPENSHIFT_REPO_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$SBT_PATH</span>/bin/sbt -sbt-dir <span class="variable">$SBT_DIR</span> -ivy <span class="variable">$IVY_DIR</span> start-script</span><br></pre></td></tr></table></figure><br>This took a while to figure out. Let’s go line by line to see what everything is needed for. Lines 1, 2 and 3 define three variables that are required to run <a href="http://www.scala-sbt.org/" target="_blank" rel="external">SBT</a> (they could have been moved to pre_build script to keep everything SBT related in one place). </p>
<ul>
<li>Line 1 simply defines the path to <a href="http://www.scala-sbt.org/" target="_blank" rel="external">SBT</a> directory.</li>
<li>Line 2 is a variable with path to folder <a href="http://www.scala-sbt.org/" target="_blank" rel="external">SBT</a> uses to store its data. On <a href="https://openshift.redhat.com/app/" target="_blank" rel="external">OpenShift</a> you don’t have permission to write to your home directory, hence a need for custom dir.</li>
<li>Line 3 is like line 2 except for Ivy cache.</li>
<li>Line 5 then switches to the repository directory. This is the place where your sources reside and this is mostly the place where you should start your build at.</li>
<li>Line 7 is a simple invocation of the SBT with the predefined settings. I’m generating a start script here (using xsbt-start-script-plugin) and that’s why I only include this goal.</li>
</ul>
<p>This somewhat works. Considering the requirements we now have a project that uses Scala 2.10. But there are now two things to consider.</p>
<p>At first in pre_build I downloaded SBT 0.12.2 and in project build.settings I had SBT setup to 0.12.1. This triggered a compilation of ‘compiler-interface’.<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">remote: [info] Compiling <span class="number">1</span> Scala <span class="keyword">source</span> to <span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1<span class="regexp">/app-root/</span><span class="keyword">runtime</span><span class="regexp">/repo/</span>target<span class="regexp">/scala-2.10/</span>classes...</span><br><span class="line">remote: [info] <span class="string">'compiler-interface'</span> not yet compiled <span class="keyword">for</span> Scala <span class="number">2.10</span>.<span class="number">0</span>. Compiling...</span><br></pre></td></tr></table></figure><br>But this failed. Compilation wouldn’t finish and the process was killed. Small fix in build.properties and upping the actual <a href="http://www.scala-sbt.org/" target="_blank" rel="external">SBT</a> version to 0.12.2 fixed this - no more recompilation of ‘compiler-interface’.</p>
<p>When you push your project to <a href="https://openshift.redhat.com/app/" target="_blank" rel="external">OpenShift</a> now, it downloads SBT, unpacks it and tries to build your project. And it fails with the same error as above.<br><figure class="highlight stata"><figcaption><span>Build fails after git push</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">remote: restart_on_add=false</span><br><span class="line">remote: stop</span><br><span class="line">remote: Done</span><br><span class="line">remote: restart_on_add=false</span><br><span class="line">remote: Running .openshift/action_hooks/pre_build</span><br><span class="line">remote: pre_build</span><br><span class="line">remote: SBT installed</span><br><span class="line">remote: Running .openshift/action_hooks/build</span><br><span class="line">remote: build</span><br><span class="line">remote: /<span class="keyword">var</span>/lib/openshift/512617424382ec272a0000b1/git/yatstaging2.git</span><br><span class="line">remote: /<span class="keyword">var</span>/lib/openshift/512617424382ec272a0000b1/<span class="keyword">app</span>-root/runtime/repo</span><br><span class="line">remote: [info] Loading project definition from /<span class="keyword">var</span>/lib/openshift/512617424382ec272a0000b1/<span class="keyword">app</span>-root/runtime/repo/project</span><br><span class="line">remote: [info] Updating &#123;<span class="keyword">file</span>:/<span class="keyword">var</span>/lib/openshift/512617424382ec272a0000b1/<span class="keyword">app</span>-root/runtime/repo/project/&#125;default-2353b7...</span><br><span class="line">        [info] Resolving org.<span class="keyword">scala</span>-sbt#precompiled-2_10_0;0.12.2 ...</span><br><span class="line">remote: [info] Done updating.</span><br><span class="line">remote: [info] <span class="keyword">Set</span> current project to YAT Server (<span class="keyword">in</span> build <span class="keyword">file</span>:/<span class="keyword">var</span>/lib/openshift/512617424382ec272a0000b1/<span class="keyword">app</span>-root/runtime/repo/)</span><br><span class="line">remote: [info] Updating &#123;<span class="keyword">file</span>:/<span class="keyword">var</span>/lib/openshift/512617424382ec272a0000b1/<span class="keyword">app</span>-root/runtime/repo/&#125;default-e6271e...</span><br><span class="line">remote: [info] Resolving org.<span class="keyword">scala</span>-lang#<span class="keyword">scala</span>-library;2.10.0 ...</span><br><span class="line">remote: [info] Done updating.</span><br><span class="line">remote: [debug]</span><br><span class="line">remote: [debug] Initial source changes:</span><br><span class="line">remote: [debug]   removed:<span class="keyword">Set</span>()</span><br><span class="line">remote: [debug] 	added: <span class="keyword">Set</span>(/<span class="keyword">var</span>/lib/openshift/512617424382ec272a0000b1/<span class="keyword">app</span>-root/runtime/repo/src/main/<span class="keyword">scala</span>/<span class="keyword">pl</span>/apptile/yat/YAT.<span class="keyword">scala</span>)</span><br><span class="line">remote: [debug] 	modified: <span class="keyword">Set</span>()</span><br><span class="line">remote: [debug] Removed products: <span class="keyword">Set</span>()</span><br><span class="line">remote: [debug] Modified external sources: <span class="keyword">Set</span>()</span><br><span class="line">remote: [debug] Modified binary dependencies: <span class="keyword">Set</span>()</span><br><span class="line">remote: [debug] Initial directly invalidated sources: <span class="keyword">Set</span>(/<span class="keyword">var</span>/lib/openshift/512617424382ec272a0000b1/<span class="keyword">app</span>-root/runtime/repo/src/main/<span class="keyword">scala</span>/<span class="keyword">pl</span>/apptile/yat/YAT.<span class="keyword">scala</span>)</span><br><span class="line">remote: [debug]</span><br><span class="line">remote: [debug] Sources indirectly invalidated <span class="keyword">by</span>:</span><br><span class="line">remote: [debug] 	product: <span class="keyword">Set</span>()</span><br><span class="line">remote: [debug] 	binary dep: <span class="keyword">Set</span>()</span><br><span class="line">remote: [debug] 	external source: <span class="keyword">Set</span>()</span><br><span class="line">remote: [debug] Initially invalidated: <span class="keyword">Set</span>(/<span class="keyword">var</span>/lib/openshift/512617424382ec272a0000b1/<span class="keyword">app</span>-root/runtime/repo/src/main/<span class="keyword">scala</span>/<span class="keyword">pl</span>/apptile/yat/YAT.<span class="keyword">scala</span>)</span><br><span class="line">remote: [debug] Recompiling all 1 sources: invalidated sources (1) exceeded 50.0% of all sources</span><br><span class="line">remote: [info] Compiling 1 <span class="keyword">Scala</span> source to /<span class="keyword">var</span>/lib/openshift/512617424382ec272a0000b1/<span class="keyword">app</span>-root/runtime/repo/target/<span class="keyword">scala</span>-2.10/classes...</span><br><span class="line">remote: [debug] Running cached compiler 18d45f0, interfacing (CompilerInterface) with <span class="keyword">Scala</span> compiler <span class="keyword">version</span> 2.10.0</span><br><span class="line">remote: [debug] Calling <span class="keyword">Scala</span> compiler with arguments  (CompilerInterface):</span><br><span class="line">remote: [debug] 	-<span class="literal">d</span></span><br><span class="line">remote: [debug] 	/<span class="keyword">var</span>/lib/openshift/512617424382ec272a0000b1/<span class="keyword">app</span>-root/runtime/repo/target/<span class="keyword">scala</span>-2.10/classes</span><br><span class="line">remote: [debug] 	-bootclasspath</span><br><span class="line">remote: [debug] 	/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.9/jre/lib/resources.jar:/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.9/jre/lib/rt.jar:/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.9/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.9/jre/lib/jsse.jar:/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.9/jre/lib/jce.jar:/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.9/jre/lib/charsets.jar:/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.9/jre/lib/netx.jar:/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.9/jre/lib/<span class="keyword">plugin</span>.jar:/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.9/jre/lib/rhino.jar:/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.9/jre/lib/jfr.jar:/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.9/jre/classes:/<span class="keyword">var</span>/lib/openshift/512617424382ec272a0000b1/<span class="keyword">app</span>-root/data/.sbt/<span class="keyword">boot</span>/<span class="keyword">scala</span>-2.10.0/lib/<span class="keyword">scala</span>-library.jar</span><br><span class="line">remote: [debug] 	-classpath</span><br><span class="line">remote: [debug] 	/<span class="keyword">var</span>/lib/openshift/512617424382ec272a0000b1/<span class="keyword">app</span>-root/runtime/repo/target/<span class="keyword">scala</span>-2.10/classes</span><br><span class="line">remote: /<span class="keyword">var</span>/lib/openshift/512617424382ec272a0000b1/<span class="keyword">app</span>-root/runtime/repo/.openshift/action_hooks/build: <span class="keyword">line</span> 21:  7042 Killed            <span class="label">$SBT_PATH</span>/bin/sbt -sbt-<span class="keyword">dir</span> <span class="label">$SBT_DIR</span> -ivy <span class="label">$IVY_DIR</span> start-script</span><br><span class="line">remote: Running .openshift/action_hooks/deploy</span><br><span class="line">remote: deploy</span><br><span class="line">remote: hot_deploy_added=false</span><br><span class="line">remote: start</span><br><span class="line">remote: Done</span><br><span class="line">remote: start: missing job name</span><br><span class="line">remote: Try `start --<span class="keyword">help</span>' <span class="keyword">for</span> <span class="keyword">more</span> information.</span><br><span class="line">remote: Running .openshift/action_hooks/post_deploy</span><br><span class="line">remote: post_deploy</span><br></pre></td></tr></table></figure><br>The process is being killed anyway. This was driving me crazy, because no matter what I did the build always crashed. Then I tried SSH and run the script manually and… bam! It worked.<br><figure class="highlight groovy"><figcaption><span>Build successful when run manually from SSH session</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">build</span><br><span class="line"><span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1</span><br><span class="line"><span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1<span class="regexp">/app-root/</span>runtime/repo</span><br><span class="line">[info] Loading project definition from <span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1<span class="regexp">/app-root/</span>runtime<span class="regexp">/repo/</span>project</span><br><span class="line">[info] Set current project to YAT Server (<span class="keyword">in</span> build <span class="string">file:</span><span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1<span class="regexp">/app-root/</span>runtime<span class="regexp">/repo/</span>)</span><br><span class="line">[debug]</span><br><span class="line">[debug] Initial source <span class="string">changes:</span></span><br><span class="line">[debug]   <span class="string">removed:</span>Set()</span><br><span class="line">[debug] 	<span class="string">added:</span> Set(<span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1<span class="regexp">/app-root/</span>runtime<span class="regexp">/repo/</span>src<span class="regexp">/main/</span>scala<span class="regexp">/pl/</span>apptile<span class="regexp">/yat/</span>YAT.scala)</span><br><span class="line">[debug] 	<span class="string">modified:</span> Set()</span><br><span class="line">[debug] Removed <span class="string">products:</span> Set()</span><br><span class="line">[debug] Modified external <span class="string">sources:</span> Set()</span><br><span class="line">[debug] Modified binary <span class="string">dependencies:</span> Set()</span><br><span class="line">[debug] Initial directly invalidated <span class="string">sources:</span> Set(<span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1<span class="regexp">/app-root/</span>runtime<span class="regexp">/repo/</span>src<span class="regexp">/main/</span>scala<span class="regexp">/pl/</span>apptile<span class="regexp">/yat/</span>YAT.scala)</span><br><span class="line">[debug]</span><br><span class="line">[debug] Sources indirectly invalidated <span class="string">by:</span></span><br><span class="line">[debug] 	<span class="string">product:</span> Set()</span><br><span class="line">[debug] 	binary <span class="string">dep:</span> Set()</span><br><span class="line">[debug] 	external <span class="string">source:</span> Set()</span><br><span class="line">[debug] Initially <span class="string">invalidated:</span> Set(<span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1<span class="regexp">/app-root/</span>runtime<span class="regexp">/repo/</span>src<span class="regexp">/main/</span>scala<span class="regexp">/pl/</span>apptile<span class="regexp">/yat/</span>YAT.scala)</span><br><span class="line">[debug] Recompiling all <span class="number">1</span> <span class="string">sources:</span> invalidated sources (<span class="number">1</span>) exceeded <span class="number">50.0</span>% of all sources</span><br><span class="line">[info] Compiling <span class="number">1</span> Scala source to <span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1<span class="regexp">/app-root/</span>runtime<span class="regexp">/repo/</span>target<span class="regexp">/scala-2.10/</span>classes...</span><br><span class="line">[debug] Running cached compiler <span class="number">12</span>a6774, interfacing (CompilerInterface) with Scala compiler version <span class="number">2.10</span>.0</span><br><span class="line">[debug] Calling Scala compiler with arguments  (CompilerInterface):</span><br><span class="line">[debug] 	-d</span><br><span class="line">[debug] 	<span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1<span class="regexp">/app-root/</span>runtime<span class="regexp">/repo/</span>target<span class="regexp">/scala-2.10/</span>classes</span><br><span class="line">[debug] 	-bootclasspath</span><br><span class="line">[debug] 	<span class="regexp">/usr/</span>lib<span class="regexp">/jvm/</span>java-<span class="number">1.7</span>.0-openjdk-<span class="number">1.7</span>.0.9<span class="regexp">/jre/</span>lib<span class="regexp">/resources.jar:/</span>usr<span class="regexp">/lib/</span>jvm<span class="regexp">/java-1.7.0-openjdk-1.7.0.9/</span>jre<span class="regexp">/lib/</span>rt.<span class="string">jar:</span><span class="regexp">/usr/</span>lib<span class="regexp">/jvm/</span>java-<span class="number">1.7</span>.0-openjdk-<span class="number">1.7</span>.0.9<span class="regexp">/jre/</span>lib<span class="regexp">/sunrsasign.jar:/</span>usr<span class="regexp">/lib/</span>jvm<span class="regexp">/java-1.7.0-openjdk-1.7.0.9/</span>jre<span class="regexp">/lib/</span>jsse.<span class="string">jar:</span><span class="regexp">/usr/</span>lib<span class="regexp">/jvm/</span>java-<span class="number">1.7</span>.0-openjdk-<span class="number">1.7</span>.0.9<span class="regexp">/jre/</span>lib<span class="regexp">/jce.jar:/</span>usr<span class="regexp">/lib/</span>jvm<span class="regexp">/java-1.7.0-openjdk-1.7.0.9/</span>jre<span class="regexp">/lib/</span>charsets.<span class="string">jar:</span><span class="regexp">/usr/</span>lib<span class="regexp">/jvm/</span>java-<span class="number">1.7</span>.0-openjdk-<span class="number">1.7</span>.0.9<span class="regexp">/jre/</span>lib<span class="regexp">/netx.jar:/</span>usr<span class="regexp">/lib/</span>jvm<span class="regexp">/java-1.7.0-openjdk-1.7.0.9/</span>jre<span class="regexp">/lib/</span>plugin.<span class="string">jar:</span><span class="regexp">/usr/</span>lib<span class="regexp">/jvm/</span>java-<span class="number">1.7</span>.0-openjdk-<span class="number">1.7</span>.0.9<span class="regexp">/jre/</span>lib<span class="regexp">/rhino.jar:/</span>usr<span class="regexp">/lib/</span>jvm<span class="regexp">/java-1.7.0-openjdk-1.7.0.9/</span>jre<span class="regexp">/lib/</span>jfr.<span class="string">jar:</span><span class="regexp">/usr/</span>lib<span class="regexp">/jvm/</span>java-<span class="number">1.7</span>.0-openjdk-<span class="number">1.7</span>.0.9<span class="regexp">/jre/</span><span class="string">classes:</span><span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1<span class="regexp">/app-root/</span>data<span class="regexp">/.sbt/</span>boot<span class="regexp">/scala-2.10.0/</span>lib/scala-library.jar</span><br><span class="line">[debug] 	-classpath</span><br><span class="line">[debug] 	<span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1<span class="regexp">/app-root/</span>runtime<span class="regexp">/repo/</span>target<span class="regexp">/scala-2.10/</span>classes</span><br><span class="line">[debug] Scala compilation took <span class="number">34.206682197</span> s</span><br><span class="line">[debug] Step <span class="number">2</span> changed sources and immdediate <span class="string">dependencies:</span></span><br><span class="line">[debug] 	Set(<span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1<span class="regexp">/app-root/</span>runtime<span class="regexp">/repo/</span>src<span class="regexp">/main/</span>scala<span class="regexp">/pl/</span>apptile<span class="regexp">/yat/</span>YAT.scala)</span><br><span class="line">[debug] Non-trivial strongly connected <span class="string">components:</span></span><br><span class="line">[debug]</span><br><span class="line">[debug] Step <span class="number">2</span> invalidated <span class="string">sources:</span></span><br><span class="line">[debug] 	Set(<span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1<span class="regexp">/app-root/</span>runtime<span class="regexp">/repo/</span>src<span class="regexp">/main/</span>scala<span class="regexp">/pl/</span>apptile<span class="regexp">/yat/</span>YAT.scala)</span><br><span class="line">[info] Wrote start script <span class="keyword">for</span> <span class="string">mainClass :</span>= Some(pl.apptile.yat.YAT) to <span class="regexp">/var/</span>lib<span class="regexp">/openshift/</span><span class="number">512617424382</span>ec272a0000b1<span class="regexp">/app-root/</span>runtime<span class="regexp">/repo/</span>target/start</span><br></pre></td></tr></table></figure><br>This is quite puzzling and I can’t figure out why automatic build doesn’t work. What’s worth mentioning though is that it does work when you change Scala to 2.9.2. But it’s against requirements and hence I stopped at this point, unable to continue.</p>
<h3 id="Summary">Summary</h3><p>While I was really happy that most of the things were quite easy to start with, inability to compile the sources makes it a no-no for further work, like actually starting a spray-can server. My application was a Hello World app and if this can’t compile… Sorry <a href="https://openshift.redhat.com/app/" target="_blank" rel="external">OpenShift</a>, for now I’m switching to <a href="http://www.cloudfoundry.com/" target="_blank" rel="external">CloudFoundry</a> to see how it fares.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="The_beggining">The beggining</h3><p>This is a simple log of what I have done during past few days trying to deploy a simple app to <]]>
    </summary>
    
      <category term="cloud" scheme="http://www.piotrbuda.me/tags/cloud/"/>
    
      <category term="openshift" scheme="http://www.piotrbuda.me/tags/openshift/"/>
    
      <category term="sbt" scheme="http://www.piotrbuda.me/tags/sbt/"/>
    
      <category term="scala" scheme="http://www.piotrbuda.me/tags/scala/"/>
    
      <category term="spray" scheme="http://www.piotrbuda.me/tags/spray/"/>
    
      <category term="scala" scheme="http://www.piotrbuda.me/categories/scala/"/>
    
  </entry>
  
</feed>